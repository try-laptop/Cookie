{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/extension-store.ts"],"sourcesContent":["// src/lib/extension-store.ts\n// THIS IS A DEMO STORE AND IS NOT SUITABLE FOR PRODUCTION\n// Data will be lost on server restart.\n\nexport interface StoredExtensionFile {\n  id: string;\n  fileName: string;\n  content: ArrayBuffer; // Store content as ArrayBuffer for binary data\n  mimeType: string;\n  size: number;\n  uploadedAt: Date;\n}\n\nconst EXTENSION_STORE_KEY = 'chrome-extension-zip';\n\n// Ensure a single instance of the store, especially in dev with HMR\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __extensionStore__: Map<string, StoredExtensionFile> | undefined;\n}\n\nlet extensionStore: Map<string, StoredExtensionFile>;\n\nif (process.env.NODE_ENV === 'production') {\n  extensionStore = new Map<string, StoredExtensionFile>();\n} else {\n  if (!globalThis.__extensionStore__) {\n    globalThis.__extensionStore__ = new Map<string, StoredExtensionFile>();\n  }\n  extensionStore = globalThis.__extensionStore__;\n}\n\n\nexport function addExtensionFileToStore(file: {\n  fileName: string;\n  content: ArrayBuffer;\n  mimeType: string;\n  size: number;\n}): StoredExtensionFile {\n  const id = EXTENSION_STORE_KEY; // Use a fixed key to ensure only one extension\n  const newFile: StoredExtensionFile = {\n    ...file,\n    id,\n    uploadedAt: new Date(),\n  };\n  // Overwrite any existing extension by using .set()\n  extensionStore.set(id, newFile);\n  return newFile;\n}\n\nexport function getExtensionFileFromStore(): StoredExtensionFile | undefined {\n  return extensionStore.get(EXTENSION_STORE_KEY);\n}\n\nexport function getExtensionFileMetadataFromStore(): Omit<StoredExtensionFile, 'content'> | undefined {\n  const file = extensionStore.get(EXTENSION_STORE_KEY);\n  if (file) {\n    const { content, ...metadata } = file;\n    return metadata;\n  }\n  return undefined;\n}\n\nexport function deleteExtensionFileFromStore(): boolean {\n  if (extensionStore.has(EXTENSION_STORE_KEY)) {\n    return extensionStore.delete(EXTENSION_STORE_KEY);\n  }\n  return false; // No file to delete\n}\n"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,0DAA0D;AAC1D,uCAAuC;;;;;;;AAWvC,MAAM,sBAAsB;AAQ5B,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,WAAW,kBAAkB,EAAE;QAClC,WAAW,kBAAkB,GAAG,IAAI;IACtC;IACA,iBAAiB,WAAW,kBAAkB;AAChD;AAGO,SAAS,wBAAwB,IAKvC;IACC,MAAM,KAAK,qBAAqB,+CAA+C;IAC/E,MAAM,UAA+B;QACnC,GAAG,IAAI;QACP;QACA,YAAY,IAAI;IAClB;IACA,mDAAmD;IACnD,eAAe,GAAG,CAAC,IAAI;IACvB,OAAO;AACT;AAEO,SAAS;IACd,OAAO,eAAe,GAAG,CAAC;AAC5B;AAEO,SAAS;IACd,MAAM,OAAO,eAAe,GAAG,CAAC;IAChC,IAAI,MAAM;QACR,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,GAAG;QACjC,OAAO;IACT;IACA,OAAO;AACT;AAEO,SAAS;IACd,IAAI,eAAe,GAAG,CAAC,sBAAsB;QAC3C,OAAO,eAAe,MAAM,CAAC;IAC/B;IACA,OAAO,OAAO,oBAAoB;AACpC","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/download-extension/route.ts"],"sourcesContent":["// src/app/api/download-extension/route.ts\nimport { getExtensionFileFromStore } from '@/lib/extension-store';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  console.log('[API /api/download-extension] GET request received.');\n  const fileData = getExtensionFileFromStore();\n\n  if (!fileData) {\n    console.error('[API /api/download-extension] Extension file not found in store. It might not have been uploaded or the server may have restarted.');\n    return new NextResponse('Extension file not found. Please upload it again.', { status: 404 });\n  }\n\n  console.log(`[API /api/download-extension] File found: ${fileData.fileName}, size: ${fileData.size}, mimeType: ${fileData.mimeType}`);\n\n  try {\n    const blob = new Blob([fileData.content], { type: fileData.mimeType });\n    \n    const headers = new Headers();\n    headers.set('Content-Type', fileData.mimeType);\n    headers.set('Content-Disposition', `attachment; filename=\"${fileData.fileName}\"`);\n    headers.set('Content-Length', String(blob.size));\n\n    console.log('[API /api/download-extension] Sending file to client.');\n    return new NextResponse(blob, { status: 200, headers });\n  } catch (error) {\n    console.error('[API /api/download-extension] Error creating or sending blob:', error);\n    return new NextResponse('Error processing file for download. Check server logs.', { status: 500 });\n  }\n}\n\n// Ensure the route is dynamically evaluated\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;;AAC1C;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,QAAQ,GAAG,CAAC;IACZ,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,4BAAyB,AAAD;IAEzC,IAAI,CAAC,UAAU;QACb,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,qDAAqD;YAAE,QAAQ;QAAI;IAC7F;IAEA,QAAQ,GAAG,CAAC,CAAC,0CAA0C,EAAE,SAAS,QAAQ,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,YAAY,EAAE,SAAS,QAAQ,EAAE;IAEpI,IAAI;QACF,MAAM,OAAO,IAAI,KAAK;YAAC,SAAS,OAAO;SAAC,EAAE;YAAE,MAAM,SAAS,QAAQ;QAAC;QAEpE,MAAM,UAAU,IAAI;QACpB,QAAQ,GAAG,CAAC,gBAAgB,SAAS,QAAQ;QAC7C,QAAQ,GAAG,CAAC,uBAAuB,CAAC,sBAAsB,EAAE,SAAS,QAAQ,CAAC,CAAC,CAAC;QAChF,QAAQ,GAAG,CAAC,kBAAkB,OAAO,KAAK,IAAI;QAE9C,QAAQ,GAAG,CAAC;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;YAAE,QAAQ;YAAK;QAAQ;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iEAAiE;QAC/E,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,0DAA0D;YAAE,QAAQ;QAAI;IAClG;AACF;AAGO,MAAM,UAAU","debugId":null}}]
}